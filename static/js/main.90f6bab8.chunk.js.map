{"version":3,"sources":["components/Summarize.js","constants/constants.js","components/MoneyAction.js","components/MoneyList.js","App.js","serviceWorker.js","index.js"],"names":["date","Date","monthNames","Summarize","list","sum","reduce","item","status","value","incomeTotal","expensesTotal","className","getMonth","getDate","statuses","MoneyAction","handleAddItem","useState","description","setItem","handleUpdateItem","event","field","target","newItem","handleClassName","console","log","document","getElementById","options","selectedIndex","action","onSubmit","preventDefault","handleSaveItem","id","onChange","required","type","placeholder","MoneyList","handleDelete","incomeList","filter","expensesList","map","key","onClick","aria-hidden","App","setList","useEffect","localStorage","getItem","JSON","parse","stringify","udatedItem","now","deletedList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90f6bab8.chunk.js","sourcesContent":["import React from \"react\";\r\nlet date = new Date();\r\nconst monthNames = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nfunction Summarize({ list }) {\r\n  let sum = list.reduce(\r\n    (sum, item) =>\r\n      item.status === true || item.status === \"true\"\r\n        ? sum + item.value\r\n        : sum - item.value,\r\n    0\r\n  );\r\n  let incomeTotal = list.reduce(\r\n    (incomeTotal, item) =>\r\n      item.status ? incomeTotal + item.value : incomeTotal,\r\n    0\r\n  );\r\n  let expensesTotal = list.reduce(\r\n    (expensesTotal, item) =>\r\n      item.status === \"false\" ? expensesTotal - item.value : expensesTotal,\r\n    0\r\n  );\r\n  return (\r\n    <div className=\"summary\">\r\n      <p className=\"summary__date\">\r\n        Available Budget in :{\" \"}\r\n        {`${monthNames[date.getMonth()]} ${date.getDate()}`}\r\n      </p>\r\n      <h1\r\n        className=\"summary__money\"\r\n        className={\r\n          sum >= 0 ? \"summary__sum income-lger\" : \"summary__sum expense-lger\"\r\n        }\r\n      >\r\n        {sum}\r\n      </h1>\r\n      {/* <p className=\"summary__expenses\">\r\n        {expensesTotal} :{\" \"}\r\n        {expensesTotal / incomeTotal\r\n          ? `${Math.trunc((expensesTotal * 100) / incomeTotal)}%`\r\n          : \"---\"}\r\n      </p> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Summarize;\r\n","export const statuses = {\r\n    INCOME: \"true\",\r\n    EXPENSE: \"false\"\r\n}","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { statuses } from \"../constants/constants\";\r\n// const newItem = {\r\n//     description : \"\",\r\n//     value:\"\",\r\n//     status:true,\r\n// }\r\n\r\nfunction MoneyAction({ handleAddItem }) {\r\n  // const [value, setValue] = useState([]);\r\n  const [item, setItem] = useState({\r\n    description: \"\",\r\n    value: \"\",\r\n    status: statuses.INCOME,\r\n  });\r\n  const handleUpdateItem = (event, field) => {\r\n    const { value } = event.target;\r\n    const newItem = { ...item };\r\n    newItem[field] = value;\r\n    handleClassName();\r\n    setItem(newItem);\r\n    console.log(item.status);\r\n    // return(item.status)\r\n  };\r\n  const handleSaveItem = (event) => {\r\n    event.preventDefault();\r\n    // console.log(item)\r\n    handleAddItem(item);\r\n    setItem({\r\n      description: \"\",\r\n      value: \"\",\r\n      status: statuses.INCOME,\r\n    });\r\n  };\r\n  const handleClassName = () => {\r\n    return document.getElementById(\"money-status\").options[\r\n      document.getElementById(\"money-status\").selectedIndex\r\n    ].value;\r\n  };\r\n\r\n  // \"\" 123456\r\n  // 246\r\n  return (\r\n    <div className=\"money-action\">\r\n      <form action=\"submit\" onSubmit={(event) => handleSaveItem(event)}>\r\n        <select\r\n          id=\"money-status\"\r\n          value={item.status}\r\n          onChange={(event) => handleUpdateItem(event, \"status\")}\r\n          className={\r\n            item.status === \"true\" || item.status === true\r\n              ? \"money__input\"\r\n              : \"money__input money--expense\"\r\n          }\r\n        >\r\n          <option value={statuses.INCOME} className=\"money__input\">\r\n            +\r\n          </option>\r\n          <option value={statuses.EXPENSE} className=\"money__input\">\r\n            -\r\n          </option>\r\n        </select>\r\n        <input\r\n          required\r\n          type=\"text\"\r\n          className={\r\n            item.status === \"true\" || item.status === true\r\n              ? \"money__input money__description\"\r\n              : \"money__input money__description money--expense\"\r\n          }\r\n          onChange={(event) => handleUpdateItem(event, \"description\")}\r\n          value={item.description}\r\n          placeholder=\"Add your description here\"\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          className={\r\n            item.status === \"true\" || item.status === true\r\n              ? \"money__input money__amount\"\r\n              : \"money__input money__amount money--expense\"\r\n          }\r\n          onChange={(event) => handleUpdateItem(event, \"value\")}\r\n          value={item.value}\r\n          placeholder=\"$ Amount of money $\"\r\n        />\r\n        <button\r\n          className={\r\n            item.status === \"true\" || item.status === true\r\n              ? \"money__input money-submit\"\r\n              : \"money__input money-submit money--expense\"\r\n          }\r\n          type=\"submit\"\r\n        >\r\n          ADD\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nMoneyAction.propTypes = {\r\n  handleAddItem: PropTypes.func,\r\n};\r\n\r\nexport default MoneyAction;\r\n","import React, { useEffect } from 'react'\r\n\r\nfunction MoneyList({ list, handleDelete }) {\r\n    // useEffect(()=>{\r\n    //     const negativeList = list.filter( item => item.status == false);\r\n    //     console.log(negativeList)\r\n    //     return negativeList\r\n    // },[list])\r\n    const incomeList = list.filter(item => item.status === true || item.status === \"true\");\r\n    const expensesList = list.filter(item => item.status === false || item.status === \"false\");\r\n\r\n    return (\r\n        <div className=\"monney__list\">\r\n            <div className=\"monney__list__col monney__list--income\"><h4 className=\"monney__list__heading\">INCOME</h4>\r\n            {\r\n                    incomeList.map(item => (\r\n                        <div key={item.id} className=\"income__item list-item\">\r\n                            <p key={item.id}>{item.description}:    {item.value}</p>\r\n                            <button onClick={() => handleDelete(item.id)}><i className=\"fa fa-times-circle\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n            <div className=\"monney__list__col monney__list--expenses\"><h4 className=\"monney__list__heading\">EXPENSE</h4>\r\n            {\r\n                    expensesList.map(item => (\r\n                        <div key={item.id} className=\"expenses__items list-item\">\r\n                            <p key={item.id}>{item.description}:    {item.value}</p>\r\n                            <button onClick={() => handleDelete(item.id)}><i className=\"fa fa-times-circle\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoneyList\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"./assets/style/main.scss\";\n\nimport Summarize from \"./components/Summarize\";\nimport MoneyAction from \"./components/MoneyAction\";\nimport MoneyList from \"./components/MoneyList\";\n// import { Switch, Route, Link, useLocation } from \"react-router-dom\";\n// import TestRouter from \"./components/TestRouter\";\n// import User from \"./components/User\";\n\nfunction newItem(item) {\n  const id = Date.now();\n  return {\n    id,\n    description: item.description,\n    status: item.status,\n    value: +item.value,\n  };\n}\nfunction App() {\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    let list = localStorage.getItem(\"list\");\n    if (list) {\n      setList(JSON.parse(list));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"list\", JSON.stringify(list));\n    // localStorage.setItem(\"list\",'');\n  }, [list]);\n  const handleAddItem = (item) => {\n    let udatedItem = newItem(item);\n    setList([...list, udatedItem]);\n  };\n  const handleDelete = (id) => {\n    const deletedList = list.filter((value) => value.id !== id);\n    setList(deletedList);\n  };\n\n  return (\n    <div className=\"App container\">\n      <Summarize list={list} />\n      <MoneyAction handleAddItem={handleAddItem} />\n      <MoneyList list={list} handleDelete={handleDelete} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\nimport { HashRouter, BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}